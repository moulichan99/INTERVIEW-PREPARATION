////////
 1. Sort the squared array.
  squared array: compute square of each element and store in array
  
 2. find a triplet (a, b, c) such that a2 = b2 + c2, do following.

2.1..Fix ‘a’ as last element of sorted array.

2.2..Now search for pair (b, c) in subarray between first element and ‘a’. 
A pair (b, c) with given sum can be found in O(n) time using meet in middle algorithm discussed in method 1 of post.

2.3..If no pair found for current ‘a’, then move ‘a’ one position back and repeat step 3.2.










#include <bits/stdc++.h>
using namespace std;
bool triplet(vector <int> arr,int n){
    int l,r;
     for (int i = n-1; i >= 2; i--) 
    { 
        int l = 0;
        int r = i-1;
        while (l < r) 
        { 
            if (arr[l] + arr[r] == arr[i]) 
                return true; 
            (arr[l] + arr[r] < arr[i])?  l++: r--; 
        } 
    } 
    return false; 
}

int main() {
	//code
	int i,n,t,flag,num;
	cin>>t;
	while(t--)
	{
	    cin>>n;
	    vector<int> a;
	    for(i=0;i<n;i++)
	    {
	        cin>>num;
	        a.push_back(num*num);
	    }     
	    sort(a.begin(),a.end());
	    if(triplet(a,n))
	        cout<<"Yes";
	    else
	        cout<<"No";
	        
	    cout<<endl;     
	}
	return 0;
}
