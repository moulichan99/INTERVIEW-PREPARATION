Let us first solve this problem for m = n, i.e., for a square:

For m = n = 1, output: 1

For m = n = 2, output: 4 + 1 [4 of size 1×1 + 1 of size 2×2]

For m = n = 3, output: 9 + 4 + 1 [4 of size 1×1 + 4 of size 2×2 + 1 of size 3×3]



 

For m = n = 4, output 16 + 9 + 4 + 1 [16 of size 1×1 + 9 of size 2×2 + 4 of size 3×3 + 1 of size 4×4]

In general, it seems to be n^2 + (n-1)^2 + … 1 = n(n+1)(2n+1)/6



When we add a column, number of squares increased is m + (m-1) + … + 3 + 2 + 1
[m squares of size 1×1 + (m-1) squares of size 2×2 + … + 1 square of size m x m]

Which is equal to m(m+1)/2

So when we add (n-m) columns, total number of squares increased is (n-m)*m(m+1)/2.

So total number of squares is m(m+1)(2m+1)/6 + (n-m)*m(m+1)/2.


/// if m > n swap it ----------> matrix is comnmutative






///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#include <iostream>
using namespace std;

// Returns count of all squares  
// in a rectangle of size m x n 
long int countSquares(long int m, long int n) 
{ 
   long int temp;
// If n is smaller, swap m and n 
if (n < m)
{
    temp=n;
    n=m;
    m=temp;
}    
// Now n is greater dimension,  
// apply formula 
return m * (m + 1) * (2 * m + 1) /  
     6 + (n - m) * m *(m + 1) / 2; 
} 
int main() {
	//code
	int t;
	long int m,n,count;
	cin>>t;
	while(t--)
	{
	    count=0;
	    cin>>m>>n;
	    count=countSquares(m,n);
	    cout<<count<<endl;
	}
	return 0;
}
