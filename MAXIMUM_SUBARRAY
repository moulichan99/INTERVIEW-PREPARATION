using queue---------------->
void printKMax(int arr[], int n, int k) 
{ 
    // Create a Double Ended Queue, Qi that will store indexes of array elements 
    // The queue will store indexes of useful elements in every window and it will 
    // maintain decreasing order of values from front to rear in Qi, i.e., 
    // arr[Qi.front[]] to arr[Qi.rear()] are sorted in decreasing order 
    std::deque<int> Qi(k); 
  
    /* Process first k (or first window) elements of array */
    int i; 
    for (i = 0; i < k; i++) { 
        // For every element, the previous smaller elements are useless so 
        // remove them from Qi 
        while ((!Qi.empty()) && arr[i] >= arr[Qi.back()]) 
            Qi.pop_back(); // Remove from rear 
  
        // Add new element at rear of queue 
        Qi.push_back(i); 
    } 
  
    // Process rest of the elements, i.e., from arr[k] to arr[n-1] 
    for (; i < n; i++) { 
        // The element at the front of the queue is the largest element of 
        // previous window, so print it 
        cout << arr[Qi.front()] << " "; 
  
        // Remove the elements which are out of this window 
        while ((!Qi.empty()) && Qi.front() <= i - k) 
            Qi.pop_front(); // Remove from front of queue 
  
        // Remove all elements smaller than the currently 
        // being added element (remove useless elements) 
        while ((!Qi.empty()) && arr[i] >= arr[Qi.back()]) 
            Qi.pop_back(); 
  
        // Add current element at the rear of Qi 
        Qi.push_back(i); 
    } 
  
    // Print the maximum element of last window 
    cout << arr[Qi.front()]; 
} 
........................................................................................................................
simple solution ( geeks for geeks)
void printKMax(int arr[], int n, int k) 
{ 
    int j, max; 
  
    for (int i = 0; i <= n - k; i++) { 
        max = arr[i]; 
  
        for (j = i; j < (i+k); j++) { 
            if (arr[j] > max) 
                max = arr[j]; 
        } 
        printf("%d ", max); 
    } 
} 
  
int main() 
{ 
    int arr[] = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 }; 
    int n = sizeof(arr) / sizeof(arr[0]); 
    int k = 3; 
    printKMax(arr, n, k); 
    return 0; 
}


//////////////////////////////////////////////////////////////////////////////////////////////////
simple solution----------->
#include <iostream>
#include <bits/stdc++.h>
using namespace std;

int main() {
	//code
	int t;
	cin>>t;
	while(t--)
	{
	    long int j,i,n,k;
	    cin>>n>>k;
	    long int a[n+1];
	    for(i=0;i<n;i++)
	        cin>>a[i];
	   
	    vector<long int> v;
	    vector<long int> vect;
	    for(i=0;i<n-k+1;i++)
	    {
	    //   vector<long int> vect(k,0);
	       if(i==0)
	       {
    	        for(j=0;j<k;j++)
    	        {
    	            v.push_back(a[j]);
    	        }
    	        vect=v;
	       }
	       else
	       {
	           v.erase(v.begin());
	           v.push_back(a[i+k-1]);
	           vect=v;
	       }
	      // for(int s=0;s<v.size();s++)
	      //             cout<<v[s]<<" "; 
	     //    cout<<endl;     
	      sort(vect.begin(),vect.end(),greater<long int>());
	          cout<<vect[0]<<" ";
	    }
	    cout<<endl;
	}
	return 0;
}
